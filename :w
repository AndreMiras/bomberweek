import asyncio
import click
import json
import pyglet
from pyglet.window import key

from bomb import GameState, Coords, Direction, is_wall, is_breakable

RES = dict()
POLL = 0.0001
CELL_SIZE = 32


def sprite(coords: Coords, res_name, batch=None):
    x, y = coords
    return pyglet.sprite.Sprite(
        RES[res_name],
        x=x, y=y,
        batch=batch
    )


class GameView:
    def __init__(self, offset_x, offset_y):
        self.walls = pyglet.graphics.Batch()
        self.players = pyglet.graphics.Batch()
        self.effects = pyglet.graphics.Batch()
        self.off_x, self.off_y, = offset_x, offset_y

    def update_all(self, gs: GameState):
        self.update_walls(gs)
        self.update_players(gs)
        self.update_bombs(gs)
        self.update_flames(gs)
        self.update_bonuses(gs)

    def update_walls(self, gs: GameState):
        self._walls = [
            sprite(gs.cell_coords(gs.cell_from_idx(i)),
                   'wall_b' if is_breakable(v) else 'wall',
                   self.walls)
            for i, v in enumerate(gs.cells)
            if is_wall(v)
        ]

    def update_bonuses(self, gs):
        self._bonuses = [
            sprite(c.pos, c.kind, self.effects)
            for c in gs.collectibles
        ]

    def update_flames(self, gs: GameState):
        self._flames = [
            sprite(f.pos, 'flame', self.effects)
            for f in gs.flames
        ]

    def update_players(self, gs: GameState):
        self._players = [
            sprite(p.pos, p.pid, self.players)
            for p in gs.players.values()
        ]

    def update_bombs(self, gs: GameState):
        self._bombs = [
            sprite(b.pos, 'bomb', self.players)
            for b in gs.bombs
        ]

    def draw(self):
        pyglet.gl.glPushMatrix()
        pyglet.gl.glTranslatef(self.off_x, self.off_y, 0)
        self.walls.draw()
        self.effects.draw()
        self.players.draw()
        pyglet.gl.glPopMatrix()


def player_hud(pname, player, x, y, anchor_x, anchor_y):
    avatar_x = x + 5 if anchor_x == 'left' else x - 25
    label_x = x + 30 if anchor_x == 'left' else x - 30

    bomb_x =  label_x if anchor_x == 'left' else label_x - 20
    o = 1 if anchor_x == 'left' else -1

    avatar = sprite((avatar_x, y-24), player.pid)
    label = pyglet.text.Label(pname,
                              x=label_x, y=y,
                              anchor_x=anchor_x,
                              anchor_y=anchor_y)
    items = [sprite((bomb_x + (20*i*o), y-35), 'bomb')
             for i in range(player.bomb_limit)]
    return [label, avatar, *items]


class HUD:
    def __init__(self, window):
        self.window = window
        self.player_anchors = [
            (0, window.height - 5, 'left', 'top'),
            (window.width, window.height - 5, 'right', 'top'),
            (0, 30, 'left', 'bottom'),
            (window.width, 30, 'right', 'bottom'),
        ]

    def update(self, gs: GameState):
        self._players = []
        for i, (pname, p) in enumerate(gs.players.items()):
            self._players += player_hud(
                pname, p,
                x=self.player_anchors[i][0],
                y=self.player_anchors[i][1],
                anchor_x=self.player_anchors[i][2],
                anchor_y=self.player_anchors[i][3],
            )

    def draw(self):
        for e in self._players:
            e.draw()


class GameScreen:
    def __init__(self, window, gs: GameState):
        self.hud = HUD(window)
        self.hud.update(gs)

        ox = (window.width / 2) - (CELL_SIZE * gs.width / 2)
        oy = (window.height / 2) - (CELL_SIZE * gs.height / 2)
        self.gv = GameView(ox, oy)
        self.gv.update_all(gs)

    def draw(self):
        self.gv.draw()
        self.hud.draw()

    def update(self, update, gs):
        """ Update screen elements based on the state update received """
        self.hud.update(gs)  # anyway
        if 'players' in update:
            self.gv.update_players(gs)
        if 'bombs' in update:
            self.gv.update_bombs(gs)
        if 'flames' in update:
            self.gv.update_flames(gs)
        if 'collectibles' in update:
            self.gv.update_bonuses(gs)
        if 'cells' in update:
            self.gv.update_walls(gs)


def prompt_screen():
    # TODO will do last, arguments for now
    name_lbl = pyglet.text.Label('Name:')
    return [name_lbl]


def lobby_screen():
    pass


class Client:
    def __init__(self, name, window):
        self.keys = key.KeyStateHandler()
        window.push_handlers(self.keys)
        self.pname = name
        self.window = window
        self.ready = False
        self.transport = None
        self.connected = False
        self.ingame = True
        self.status_label = pyglet.text.Label(
            "waiting for connection...",
            x=10, y=10
        )
        self.lobby_labels = []
        self.game = GameState()
        from bomb import load_level, Player
        self.game.set_level(*load_level('map1.txt'))
        self.game.players = {
            'Someone': Player((100,100), 'a', bomb_limit=2),
            'Sarah': Player((100,100), 'b', bomb_limit=5),
            'Freddy': Player((100,100), 'c'),
            'ElKiller': Player((100,100), 'd'),
        }
        self.game_view = GameScreen(self.window, self.game)

    def __call__(self):
        return self

    def connection_made(self, transport):
        self.transport = transport
        self.send({'code': 'hi', 'name': self.pname})

    def datagram_received(self, data, addr):
        data = json.loads(data.decode())
        code = data['code']
        if code == 'welcome':
            self.connected = True
        elif code == 'ping':
            self.send(data)  # send back
        elif code == 'lobby':
            self.update_lobby(data['players'])
        elif code == 'fatal':
            self.connected = False
            self.ingame = False
            self.status_label.text = data['text']
        elif code == 'update':  # propably useless, will see
            state = data['state']
            # self.game.load(state)
            self.game_view.update(state, self.game)

        elif code == 'pid':  # propably useless, will see
            self.pid = data['pid']
        elif code == 'game_start':
            self.game = GameState()
            self.game.load(data['state'])
            self.game_view = GameScreen(self.window, self.game)
            self.ingame = True
            print(data)

    def error_received(self, error):
        self.status_label.text = str(error)

    def update(self, dt):
        if not self.ingame:
            return

        d = Direction(0)
        if self.keys[key.UP]:
            d |= Direction.UP
        if self.keys[key.LEFT]:
            d |= Direction.LEFT
        if self.keys[key.DOWN]:
            d |= Direction.DOWN
        if self.keys[key.RIGHT]:
            d |= Direction.RIGHT
        if d:
            self.send({'code': 'move', 'dir': d.value})

    def update_lobby(self, players):
        self.lobby_labels = [
            pyglet.text.Label(f"{name}: {'OK' if val else 'Not Ready'}",
                              y=i*20, anchor_y='bottom')
            for i, (name, val) in enumerate(players.items())
        ]

    def send(self, payload):
        self.transport.sendto(json.dumps(payload).encode())

    async def terminate(self):
        self.send({'code': 'bye'})
        await asyncio.sleep(0.2)

    @property
    def in_lobby(self):
        return self.connected and not self.ingame

    def on_key_press(self, sym, mod):
        if self.in_lobby:
            if sym == key.ENTER:
                self.ready = not self.ready
                self.send({'code': 'ready',
                           'ready': self.ready})
        elif self.ingame:
            if sym == key.SPACE:
                self.send({'code': 'drop_bomb'})

    def draw(self):
        if self.ingame:
            self.game_view.draw()
        elif self.connected:
            for l in self.lobby_labels:
                l.draw()
        else:
            self.status_label.draw()


def start(player_name, host):
    loop = asyncio.get_event_loop()
    window = pyglet.window.Window()

    RES.update({
        'wall': pyglet.resource.image('img/wall.png'),
        'wall_b': pyglet.resource.image('img/wall_b.png'),
        'bomb': pyglet.resource.image('img/bomb.png'),
        'flame': pyglet.resource.image('img/flame.png'),
        'a': pyglet.resource.image('img/p1.png'),
        'b': pyglet.resource.image('img/p2.png'),
        'c': pyglet.resource.image('img/p3.png'),
        'd': pyglet.resource.image('img/p4.png'),
        '+': pyglet.resource.image('img/extra_bomb.png'),
        '~': pyglet.resource.image('img/speed_boots.png'),
        '!': pyglet.resource.image('img/mega_bomb.png'),
    })

    client = Client(player_name, window)

    async def _client(host):
        nonlocal client
        transport, client = await loop.create_datagram_endpoint(
            client, remote_addr=host)

    async def pyglet_loop():
        while True:
            pyglet.clock.tick()
            if window.has_exit:
                break
            window.dispatch_events()
            window.dispatch_event('on_draw')
            window.flip()
            await asyncio.sleep(POLL)
        await client.terminate()
        loop.stop()

    @window.event
    def on_draw():
        window.clear()
        client.draw()

    window.push_handlers(client.on_key_press)
    loop.create_task(pyglet_loop())

    print("Connecting to server...")
    loop.run_until_complete(
        asyncio.ensure_future(_client(host), loop=loop))

    pyglet.clock.schedule(client.update)

    loop.run_forever()


@click.command()
@click.option('-n', '--name', default='NoName')
def main(name):
    host = ('127.0.0.1', 9999)
    start(name, host)


if __name__ == "__main__":
    main()
